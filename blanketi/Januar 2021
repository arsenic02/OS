/*
1. Koriscenjem programskog jezika C napisati  Linux program koji u glavnoj niti od korisnika ocekuje da unese ceo pozitivan broj. Zatim startuje drugu nit, prosledjuje joj uneti broj, a druga nit odbrojava (i stampa na ekranu brojeve kako odbrojava) od  unetog broja do 0 sa pauzom od 2 sekunde izmedju 2 uzastopna broja. Zatim u glavnoj niti korisnik ponovo unosi ceo broj i ovaj proces odbrojavanja i unosa
broja se ponavlja sve dok korisnik ne  unese "KRAJ".
*/

#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <string.h>

char nums[5];
int i;
pthread_mutex_t mutex;
pthread_cond_t empty,full;
int fullNum=0,run=1;

void clear_buf()
{
	for(i=0;i<5;i++)
		nums[i]='\0';
}
void* nit2(void* args)
{
	while(run)
	{
		pthread_mutex_lock(&mutex);
		while(fullNum==0)
			pthread_cond_wait(&full,&mutex);
		
		if(!run)
			break;//BITNO
		printf("\nNit odbrojava: ");
		for(i=atoi(nums);i>=0;i--)
		{
			printf("%d ",i);
			sleep(2);
		}
		
		fullNum=0;
		pthread_cond_signal(&empty);
		pthread_mutex_unlock(&mutex);
	}
}
int main()
{
	pthread_t t;
	pthread_mutex_init(&mutex,NULL);
	pthread_cond_init(&empty,NULL);
	pthread_cond_init(&full,NULL);
	pthread_create(&t,NULL,(void*) nit2,NULL);
	
	do
	{
		pthread_mutex_lock(&mutex);
		while(fullNum==1)
			pthread_cond_wait(&empty,&mutex);
		//clear buff
		printf("\nUnesi ceo broj: ");
		scanf("%s",nums);
		
		if(strcmp(nums,"KRAJ")==0)
		{
			run=0;		
			//break;
			
		}
			
		fullNum=1;
		pthread_cond_signal(&full);		
		pthread_mutex_unlock(&mutex);
		
	}while(run);
	
	pthread_join(t,NULL);
	pthread_mutex_destroy(&mutex);
	pthread_cond_destroy(&empty);
	pthread_cond_destroy(&full);
	return 0;
}
////////////////////////////////////////////
//2.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <wait.h>
#include <unistd.h>
//#include <sys/types.h>
#define N 5

int main()
{
	srand(time(NULL));
	int pd12[2],pd21[2];

	if(pipe(pd12)!=0)
	{
		perror("Greska pri kreiranju pd12\n");
		//return -1;
		exit(1);
	}
	if(pipe(pd21)!=0)
	{
		perror("Greska pri kreiranju pd21\n");
		//return -1;
		exit(1);
	}
	
	if(fork()!=0)
	{
		close(pd12[0]);
		close(pd21[1]);
		int buffer[N];
		int i;
		printf("Proces roditelj je generisao brojeve: \n");

		for(i=0;i<N;i++)
		{
			buffer[i]=rand()%100;	
			printf("%d ",buffer[i]);
		}

		write(pd12[1],buffer,N*sizeof(int));
		int count=read(pd21[0],buffer,N*sizeof(int));
		printf("\nProces roditelj je dobio %d parnih brojeva od  deteta: \n",count/sizeof(int));
		
		wait(NULL);	
		close(pd12[1]);
		close(pd21[0]);	
		return 0;	
	}
	else
	{
		close(pd12[1]);
		close(pd21[0]);

		int i,j;
		int buffer[N];
		read(pd12[0],buffer,N*sizeof(int));
		j=0;

		for(i=0;i<N;i++)
		{
			if(buffer[i]%2==0)
				buffer[j++]=buffer[i];
		}

		write(pd21[1],buffer,j*sizeof(int));
		close(pd12[0]);
		close(pd21[1]);
		return 0;
	}
}
