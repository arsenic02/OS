/*
1. Koriscenjem programskog jzika C kreitrati 3 linux procesa koja komuniciraju koriscenjem datavoda. Prvi proces generise niz proizvoljnih karaktera (duzina niza je fiksna i iznosi 20 karaktera)  a zatim racuna zbir ASCII vredosti svih tako generisanih karaktera. ukoliko je dobijeni zbir paran broj, generisani niz karaktera se koriscenjem datavoda salje drugom procesu koji ih upisuje u datoteku KARAKTERI.txt. Ukoliko je dobijeni zbir neparan broj, generisani niz karaktera se koriscenjem datavoda salje trecem procesu koji ih stampa na standardnom izlazu.
LOSE SINHRONIZUJEEEE
2. zadatak zanimljiv
*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <wait.h> 
#include <time.h>
#include <string.h>
#define N 20

int main()
{
	
	int pd12[2],pd13[2],i;
	
	if(pipe(pd12)!=0 || pipe(pd13)!=0)
	{
		perror("Greska  pri kreiranju datavoda!\n");
		exit(1);
	}
	int pid=fork();
	int pid2;
	if(pid !=0)
	{
		close(pd12[0]);
		close(pd13[0]);
		
		srand(time(NULL));
		char buffer[N+1];
		
		printf("Proces roditelj je generisao sledeci niz karaktera: \n");
		int suma=0;
		
		for(i=0;i<N;i++)
		{
			buffer[i]='A'+rand()%26;
			printf("%c ",buffer[i]);
			suma+=buffer[i];
		}
		
		buffer[N]='\0';
		printf("\n");
		int pid2=fork();
		//int pid3=fork();
		
		if(suma%2==0)
		{
			write(pd12[1],buffer,strlen(buffer)+1);
		}
		else
			write(pd13[1],buffer,strlen(buffer)+1);
		
		wait(NULL);
		close(pd12[1]);
		close(pd13[1]);
				
	}
	else //if (pid2=fork() !=0 )
	{
		pid2=fork();
		
		if(pid2!=0)
		{
		
			char buffer[N+1];
			close(pd13[1]);
			close(pd13[0]);
			close(pd12[1]);
			int count=read(pd12[0],buffer,sizeof(buffer));

			FILE* f=fopen("KARAKTERI.txt","w");
			if(f==NULL)
			{
				perror("Greska pri otvaranju fajla\n");
				return -1;
			}
			
			fprintf(f,"%s\n",buffer);
			fclose(f);
			printf("Proces 2 je upisao niz karaktera u KARAKTERI.txt");
			close(pd12[0]);
			return 0;
			//slanje drugom proces
			//upis u datoteku KARAKTERI.txt
		}
		else
		{
			char buffer[N+1];
			close(pd12[0]);
			close(pd12[1]);
			close(pd13[1]);
			
			int count=read(pd13[0],buffer,sizeof(buffer));//strlen(buffer)+1
			
			printf("Proces 3 stampa niz karaktera u konzoli (kolorizovano): \n");
			for(i=0;i<count;i++)
				printf("%c ",buffer[i]);
			close(pd13[0]);
			//sprintf("%s ",buffer);	
			//slanje trecem procesu
			//stampa na izlazu
		}	
	}	
}
